// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_message_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Map2DClientMessage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Map2DServerMessage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OtherClientMessage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_OtherServerMessage;
}  // namespace protobuf_message_2eproto
class OtherClientMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OtherClientMessage>
      _instance;
} _OtherClientMessage_default_instance_;
class OtherServerMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OtherServerMessage>
      _instance;
} _OtherServerMessage_default_instance_;
class Map2DClientMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Map2DClientMessage>
      _instance;
} _Map2DClientMessage_default_instance_;
class Map2DServerMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Map2DServerMessage>
      _instance;
} _Map2DServerMessage_default_instance_;
class ServerMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServerMessage>
      _instance;
  const ::OtherServerMessage* for_other_;
  const ::Map2DServerMessage* for_map2d_;
} _ServerMessage_default_instance_;
class ClientMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ClientMessage>
      _instance;
  const ::OtherClientMessage* for_other_;
  const ::Map2DClientMessage* for_map2d_;
} _ClientMessage_default_instance_;
namespace protobuf_message_2eproto {
static void InitDefaultsOtherClientMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OtherClientMessage_default_instance_;
    new (ptr) ::OtherClientMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OtherClientMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OtherClientMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOtherClientMessage}, {}};

static void InitDefaultsOtherServerMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_OtherServerMessage_default_instance_;
    new (ptr) ::OtherServerMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::OtherServerMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_OtherServerMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsOtherServerMessage}, {}};

static void InitDefaultsMap2DClientMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Map2DClientMessage_default_instance_;
    new (ptr) ::Map2DClientMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Map2DClientMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Map2DClientMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMap2DClientMessage}, {}};

static void InitDefaultsMap2DServerMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Map2DServerMessage_default_instance_;
    new (ptr) ::Map2DServerMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Map2DServerMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Map2DServerMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMap2DServerMessage}, {}};

static void InitDefaultsServerMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ServerMessage_default_instance_;
    new (ptr) ::ServerMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ServerMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ServerMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsServerMessage}, {
      &protobuf_message_2eproto::scc_info_OtherServerMessage.base,
      &protobuf_message_2eproto::scc_info_Map2DServerMessage.base,}};

static void InitDefaultsClientMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ClientMessage_default_instance_;
    new (ptr) ::ClientMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ClientMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_ClientMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsClientMessage}, {
      &protobuf_message_2eproto::scc_info_OtherClientMessage.base,
      &protobuf_message_2eproto::scc_info_Map2DClientMessage.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_OtherClientMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OtherServerMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Map2DClientMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Map2DServerMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ServerMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ClientMessage.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OtherClientMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::OtherServerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Map2DClientMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Map2DClientMessage, ctl_flag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Map2DServerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Map2DServerMessage, posistion_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Map2DServerMessage, posistion_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Map2DServerMessage, canvas_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerMessage, error_code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerMessage, error_msg_),
  offsetof(::ServerMessageDefaultTypeInternal, for_other_),
  offsetof(::ServerMessageDefaultTypeInternal, for_map2d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ServerMessage, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientMessage, ctl_flag_),
  offsetof(::ClientMessageDefaultTypeInternal, for_other_),
  offsetof(::ClientMessageDefaultTypeInternal, for_map2d_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ClientMessage, message_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::OtherClientMessage)},
  { 5, -1, sizeof(::OtherServerMessage)},
  { 10, -1, sizeof(::Map2DClientMessage)},
  { 16, -1, sizeof(::Map2DServerMessage)},
  { 24, -1, sizeof(::ServerMessage)},
  { 34, -1, sizeof(::ClientMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OtherClientMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_OtherServerMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Map2DClientMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Map2DServerMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ServerMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ClientMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "message.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rmessage.proto\"\024\n\022OtherClientMessage\"\024\n"
      "\022OtherServerMessage\"\212\001\n\022Map2DClientMessa"
      "ge\0221\n\010ctl_flag\030\001 \001(\0162\037.Map2DClientMessag"
      "e.ControlFlag\"A\n\013ControlFlag\022\013\n\007UNKNOWN\020"
      "\000\022\006\n\002UP\020\001\022\010\n\004DOWN\020\002\022\010\n\004LEFT\020\003\022\t\n\005RIGHT\020\004"
      "\"N\n\022Map2DServerMessage\022\023\n\013posistion_x\030\001 "
      "\001(\005\022\023\n\013posistion_y\030\002 \001(\005\022\016\n\006canvas\030\003 \001(\014"
      "\"\225\001\n\rServerMessage\022\022\n\nerror_code\030\001 \001(\005\022\021"
      "\n\terror_msg\030\002 \001(\t\022(\n\tfor_other\030\003 \001(\0132\023.O"
      "therServerMessageH\000\022(\n\tfor_map2d\030\004 \001(\0132\023"
      ".Map2DServerMessageH\000B\t\n\007message\"\200\001\n\rCli"
      "entMessage\022\020\n\010ctl_flag\030\001 \001(\005\022(\n\tfor_othe"
      "r\030\002 \001(\0132\023.OtherClientMessageH\000\022(\n\tfor_ma"
      "p2d\030\003 \001(\0132\023.Map2DClientMessageH\000B\t\n\007mess"
      "ageb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 571);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_message_2eproto
const ::google::protobuf::EnumDescriptor* Map2DClientMessage_ControlFlag_descriptor() {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_message_2eproto::file_level_enum_descriptors[0];
}
bool Map2DClientMessage_ControlFlag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Map2DClientMessage_ControlFlag Map2DClientMessage::UNKNOWN;
const Map2DClientMessage_ControlFlag Map2DClientMessage::UP;
const Map2DClientMessage_ControlFlag Map2DClientMessage::DOWN;
const Map2DClientMessage_ControlFlag Map2DClientMessage::LEFT;
const Map2DClientMessage_ControlFlag Map2DClientMessage::RIGHT;
const Map2DClientMessage_ControlFlag Map2DClientMessage::ControlFlag_MIN;
const Map2DClientMessage_ControlFlag Map2DClientMessage::ControlFlag_MAX;
const int Map2DClientMessage::ControlFlag_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void OtherClientMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OtherClientMessage::OtherClientMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_OtherClientMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OtherClientMessage)
}
OtherClientMessage::OtherClientMessage(const OtherClientMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OtherClientMessage)
}

void OtherClientMessage::SharedCtor() {
}

OtherClientMessage::~OtherClientMessage() {
  // @@protoc_insertion_point(destructor:OtherClientMessage)
  SharedDtor();
}

void OtherClientMessage::SharedDtor() {
}

void OtherClientMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OtherClientMessage::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OtherClientMessage& OtherClientMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_OtherClientMessage.base);
  return *internal_default_instance();
}


void OtherClientMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:OtherClientMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool OtherClientMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OtherClientMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:OtherClientMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OtherClientMessage)
  return false;
#undef DO_
}

void OtherClientMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OtherClientMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:OtherClientMessage)
}

::google::protobuf::uint8* OtherClientMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OtherClientMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OtherClientMessage)
  return target;
}

size_t OtherClientMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OtherClientMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OtherClientMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OtherClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const OtherClientMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OtherClientMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OtherClientMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OtherClientMessage)
    MergeFrom(*source);
  }
}

void OtherClientMessage::MergeFrom(const OtherClientMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OtherClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void OtherClientMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OtherClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherClientMessage::CopyFrom(const OtherClientMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OtherClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherClientMessage::IsInitialized() const {
  return true;
}

void OtherClientMessage::Swap(OtherClientMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OtherClientMessage::InternalSwap(OtherClientMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OtherClientMessage::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OtherServerMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OtherServerMessage::OtherServerMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_OtherServerMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:OtherServerMessage)
}
OtherServerMessage::OtherServerMessage(const OtherServerMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:OtherServerMessage)
}

void OtherServerMessage::SharedCtor() {
}

OtherServerMessage::~OtherServerMessage() {
  // @@protoc_insertion_point(destructor:OtherServerMessage)
  SharedDtor();
}

void OtherServerMessage::SharedDtor() {
}

void OtherServerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OtherServerMessage::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OtherServerMessage& OtherServerMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_OtherServerMessage.base);
  return *internal_default_instance();
}


void OtherServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:OtherServerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool OtherServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:OtherServerMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:OtherServerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:OtherServerMessage)
  return false;
#undef DO_
}

void OtherServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:OtherServerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:OtherServerMessage)
}

::google::protobuf::uint8* OtherServerMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:OtherServerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:OtherServerMessage)
  return target;
}

size_t OtherServerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:OtherServerMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OtherServerMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:OtherServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const OtherServerMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OtherServerMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:OtherServerMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:OtherServerMessage)
    MergeFrom(*source);
  }
}

void OtherServerMessage::MergeFrom(const OtherServerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:OtherServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void OtherServerMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:OtherServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherServerMessage::CopyFrom(const OtherServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:OtherServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherServerMessage::IsInitialized() const {
  return true;
}

void OtherServerMessage::Swap(OtherServerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OtherServerMessage::InternalSwap(OtherServerMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OtherServerMessage::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Map2DClientMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Map2DClientMessage::kCtlFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Map2DClientMessage::Map2DClientMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_Map2DClientMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Map2DClientMessage)
}
Map2DClientMessage::Map2DClientMessage(const Map2DClientMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ctl_flag_ = from.ctl_flag_;
  // @@protoc_insertion_point(copy_constructor:Map2DClientMessage)
}

void Map2DClientMessage::SharedCtor() {
  ctl_flag_ = 0;
}

Map2DClientMessage::~Map2DClientMessage() {
  // @@protoc_insertion_point(destructor:Map2DClientMessage)
  SharedDtor();
}

void Map2DClientMessage::SharedDtor() {
}

void Map2DClientMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Map2DClientMessage::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Map2DClientMessage& Map2DClientMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_Map2DClientMessage.base);
  return *internal_default_instance();
}


void Map2DClientMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Map2DClientMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctl_flag_ = 0;
  _internal_metadata_.Clear();
}

bool Map2DClientMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Map2DClientMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Map2DClientMessage.ControlFlag ctl_flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_ctl_flag(static_cast< ::Map2DClientMessage_ControlFlag >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Map2DClientMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Map2DClientMessage)
  return false;
#undef DO_
}

void Map2DClientMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Map2DClientMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Map2DClientMessage.ControlFlag ctl_flag = 1;
  if (this->ctl_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ctl_flag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Map2DClientMessage)
}

::google::protobuf::uint8* Map2DClientMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Map2DClientMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Map2DClientMessage.ControlFlag ctl_flag = 1;
  if (this->ctl_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ctl_flag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Map2DClientMessage)
  return target;
}

size_t Map2DClientMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Map2DClientMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Map2DClientMessage.ControlFlag ctl_flag = 1;
  if (this->ctl_flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->ctl_flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Map2DClientMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Map2DClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Map2DClientMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Map2DClientMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Map2DClientMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Map2DClientMessage)
    MergeFrom(*source);
  }
}

void Map2DClientMessage::MergeFrom(const Map2DClientMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Map2DClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ctl_flag() != 0) {
    set_ctl_flag(from.ctl_flag());
  }
}

void Map2DClientMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Map2DClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map2DClientMessage::CopyFrom(const Map2DClientMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Map2DClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map2DClientMessage::IsInitialized() const {
  return true;
}

void Map2DClientMessage::Swap(Map2DClientMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Map2DClientMessage::InternalSwap(Map2DClientMessage* other) {
  using std::swap;
  swap(ctl_flag_, other->ctl_flag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Map2DClientMessage::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Map2DServerMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Map2DServerMessage::kPosistionXFieldNumber;
const int Map2DServerMessage::kPosistionYFieldNumber;
const int Map2DServerMessage::kCanvasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Map2DServerMessage::Map2DServerMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_Map2DServerMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Map2DServerMessage)
}
Map2DServerMessage::Map2DServerMessage(const Map2DServerMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  canvas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.canvas().size() > 0) {
    canvas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canvas_);
  }
  ::memcpy(&posistion_x_, &from.posistion_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&posistion_y_) -
    reinterpret_cast<char*>(&posistion_x_)) + sizeof(posistion_y_));
  // @@protoc_insertion_point(copy_constructor:Map2DServerMessage)
}

void Map2DServerMessage::SharedCtor() {
  canvas_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&posistion_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&posistion_y_) -
      reinterpret_cast<char*>(&posistion_x_)) + sizeof(posistion_y_));
}

Map2DServerMessage::~Map2DServerMessage() {
  // @@protoc_insertion_point(destructor:Map2DServerMessage)
  SharedDtor();
}

void Map2DServerMessage::SharedDtor() {
  canvas_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Map2DServerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Map2DServerMessage::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Map2DServerMessage& Map2DServerMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_Map2DServerMessage.base);
  return *internal_default_instance();
}


void Map2DServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:Map2DServerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  canvas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&posistion_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&posistion_y_) -
      reinterpret_cast<char*>(&posistion_x_)) + sizeof(posistion_y_));
  _internal_metadata_.Clear();
}

bool Map2DServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Map2DServerMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 posistion_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posistion_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 posistion_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posistion_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes canvas = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_canvas()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Map2DServerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Map2DServerMessage)
  return false;
#undef DO_
}

void Map2DServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Map2DServerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 posistion_x = 1;
  if (this->posistion_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->posistion_x(), output);
  }

  // int32 posistion_y = 2;
  if (this->posistion_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posistion_y(), output);
  }

  // bytes canvas = 3;
  if (this->canvas().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->canvas(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Map2DServerMessage)
}

::google::protobuf::uint8* Map2DServerMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Map2DServerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 posistion_x = 1;
  if (this->posistion_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->posistion_x(), target);
  }

  // int32 posistion_y = 2;
  if (this->posistion_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posistion_y(), target);
  }

  // bytes canvas = 3;
  if (this->canvas().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->canvas(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Map2DServerMessage)
  return target;
}

size_t Map2DServerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Map2DServerMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes canvas = 3;
  if (this->canvas().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->canvas());
  }

  // int32 posistion_x = 1;
  if (this->posistion_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->posistion_x());
  }

  // int32 posistion_y = 2;
  if (this->posistion_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->posistion_y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Map2DServerMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Map2DServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const Map2DServerMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Map2DServerMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Map2DServerMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Map2DServerMessage)
    MergeFrom(*source);
  }
}

void Map2DServerMessage::MergeFrom(const Map2DServerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Map2DServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.canvas().size() > 0) {

    canvas_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.canvas_);
  }
  if (from.posistion_x() != 0) {
    set_posistion_x(from.posistion_x());
  }
  if (from.posistion_y() != 0) {
    set_posistion_y(from.posistion_y());
  }
}

void Map2DServerMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Map2DServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map2DServerMessage::CopyFrom(const Map2DServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Map2DServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map2DServerMessage::IsInitialized() const {
  return true;
}

void Map2DServerMessage::Swap(Map2DServerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Map2DServerMessage::InternalSwap(Map2DServerMessage* other) {
  using std::swap;
  canvas_.Swap(&other->canvas_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(posistion_x_, other->posistion_x_);
  swap(posistion_y_, other->posistion_y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Map2DServerMessage::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServerMessage::InitAsDefaultInstance() {
  ::_ServerMessage_default_instance_.for_other_ = const_cast< ::OtherServerMessage*>(
      ::OtherServerMessage::internal_default_instance());
  ::_ServerMessage_default_instance_.for_map2d_ = const_cast< ::Map2DServerMessage*>(
      ::Map2DServerMessage::internal_default_instance());
}
void ServerMessage::set_allocated_for_other(::OtherServerMessage* for_other) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (for_other) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      for_other = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, for_other, submessage_arena);
    }
    set_has_for_other();
    message_.for_other_ = for_other;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerMessage.for_other)
}
void ServerMessage::set_allocated_for_map2d(::Map2DServerMessage* for_map2d) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (for_map2d) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      for_map2d = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, for_map2d, submessage_arena);
    }
    set_has_for_map2d();
    message_.for_map2d_ = for_map2d;
  }
  // @@protoc_insertion_point(field_set_allocated:ServerMessage.for_map2d)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerMessage::kErrorCodeFieldNumber;
const int ServerMessage::kErrorMsgFieldNumber;
const int ServerMessage::kForOtherFieldNumber;
const int ServerMessage::kForMap2DFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerMessage::ServerMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_ServerMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ServerMessage)
}
ServerMessage::ServerMessage(const ServerMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.error_msg().size() > 0) {
    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  error_code_ = from.error_code_;
  clear_has_message();
  switch (from.message_case()) {
    case kForOther: {
      mutable_for_other()->::OtherServerMessage::MergeFrom(from.for_other());
      break;
    }
    case kForMap2D: {
      mutable_for_map2d()->::Map2DServerMessage::MergeFrom(from.for_map2d());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ServerMessage)
}

void ServerMessage::SharedCtor() {
  error_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
  clear_has_message();
}

ServerMessage::~ServerMessage() {
  // @@protoc_insertion_point(destructor:ServerMessage)
  SharedDtor();
}

void ServerMessage::SharedDtor() {
  error_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_message()) {
    clear_message();
  }
}

void ServerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServerMessage::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServerMessage& ServerMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_ServerMessage.base);
  return *internal_default_instance();
}


void ServerMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:ServerMessage)
  switch (message_case()) {
    case kForOther: {
      delete message_.for_other_;
      break;
    }
    case kForMap2D: {
      delete message_.for_map2d_;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void ServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ServerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_code_ = 0;
  clear_message();
  _internal_metadata_.Clear();
}

bool ServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ServerMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 error_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string error_msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->error_msg().data(), static_cast<int>(this->error_msg().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ServerMessage.error_msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OtherServerMessage for_other = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_for_other()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Map2DServerMessage for_map2d = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_for_map2d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ServerMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ServerMessage)
  return false;
#undef DO_
}

void ServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ServerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerMessage.error_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_msg(), output);
  }

  // .OtherServerMessage for_other = 3;
  if (has_for_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_for_other(), output);
  }

  // .Map2DServerMessage for_map2d = 4;
  if (has_for_map2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_for_map2d(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ServerMessage)
}

::google::protobuf::uint8* ServerMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ServerMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_code = 1;
  if (this->error_code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->error_msg().data(), static_cast<int>(this->error_msg().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ServerMessage.error_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_msg(), target);
  }

  // .OtherServerMessage for_other = 3;
  if (has_for_other()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_for_other(), deterministic, target);
  }

  // .Map2DServerMessage for_map2d = 4;
  if (has_for_map2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_for_map2d(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ServerMessage)
  return target;
}

size_t ServerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ServerMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string error_msg = 2;
  if (this->error_msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_msg());
  }

  // int32 error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->error_code());
  }

  switch (message_case()) {
    // .OtherServerMessage for_other = 3;
    case kForOther: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.for_other_);
      break;
    }
    // .Map2DServerMessage for_map2d = 4;
    case kForMap2D: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.for_map2d_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServerMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ServerMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ServerMessage)
    MergeFrom(*source);
  }
}

void ServerMessage::MergeFrom(const ServerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ServerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.error_msg().size() > 0) {

    error_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_msg_);
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
  switch (from.message_case()) {
    case kForOther: {
      mutable_for_other()->::OtherServerMessage::MergeFrom(from.for_other());
      break;
    }
    case kForMap2D: {
      mutable_for_map2d()->::Map2DServerMessage::MergeFrom(from.for_map2d());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void ServerMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMessage::CopyFrom(const ServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage::IsInitialized() const {
  return true;
}

void ServerMessage::Swap(ServerMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerMessage::InternalSwap(ServerMessage* other) {
  using std::swap;
  error_msg_.Swap(&other->error_msg_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(error_code_, other->error_code_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServerMessage::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ClientMessage::InitAsDefaultInstance() {
  ::_ClientMessage_default_instance_.for_other_ = const_cast< ::OtherClientMessage*>(
      ::OtherClientMessage::internal_default_instance());
  ::_ClientMessage_default_instance_.for_map2d_ = const_cast< ::Map2DClientMessage*>(
      ::Map2DClientMessage::internal_default_instance());
}
void ClientMessage::set_allocated_for_other(::OtherClientMessage* for_other) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (for_other) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      for_other = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, for_other, submessage_arena);
    }
    set_has_for_other();
    message_.for_other_ = for_other;
  }
  // @@protoc_insertion_point(field_set_allocated:ClientMessage.for_other)
}
void ClientMessage::set_allocated_for_map2d(::Map2DClientMessage* for_map2d) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_message();
  if (for_map2d) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      for_map2d = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, for_map2d, submessage_arena);
    }
    set_has_for_map2d();
    message_.for_map2d_ = for_map2d;
  }
  // @@protoc_insertion_point(field_set_allocated:ClientMessage.for_map2d)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientMessage::kCtlFlagFieldNumber;
const int ClientMessage::kForOtherFieldNumber;
const int ClientMessage::kForMap2DFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientMessage::ClientMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_message_2eproto::scc_info_ClientMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ClientMessage)
}
ClientMessage::ClientMessage(const ClientMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ctl_flag_ = from.ctl_flag_;
  clear_has_message();
  switch (from.message_case()) {
    case kForOther: {
      mutable_for_other()->::OtherClientMessage::MergeFrom(from.for_other());
      break;
    }
    case kForMap2D: {
      mutable_for_map2d()->::Map2DClientMessage::MergeFrom(from.for_map2d());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ClientMessage)
}

void ClientMessage::SharedCtor() {
  ctl_flag_ = 0;
  clear_has_message();
}

ClientMessage::~ClientMessage() {
  // @@protoc_insertion_point(destructor:ClientMessage)
  SharedDtor();
}

void ClientMessage::SharedDtor() {
  if (has_message()) {
    clear_message();
  }
}

void ClientMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ClientMessage::descriptor() {
  ::protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ClientMessage& ClientMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_message_2eproto::scc_info_ClientMessage.base);
  return *internal_default_instance();
}


void ClientMessage::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:ClientMessage)
  switch (message_case()) {
    case kForOther: {
      delete message_.for_other_;
      break;
    }
    case kForMap2D: {
      delete message_.for_map2d_;
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void ClientMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ClientMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ctl_flag_ = 0;
  clear_message();
  _internal_metadata_.Clear();
}

bool ClientMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ClientMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ctl_flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctl_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .OtherClientMessage for_other = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_for_other()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Map2DClientMessage for_map2d = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_for_map2d()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ClientMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ClientMessage)
  return false;
#undef DO_
}

void ClientMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ClientMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ctl_flag = 1;
  if (this->ctl_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ctl_flag(), output);
  }

  // .OtherClientMessage for_other = 2;
  if (has_for_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_for_other(), output);
  }

  // .Map2DClientMessage for_map2d = 3;
  if (has_for_map2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_for_map2d(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ClientMessage)
}

::google::protobuf::uint8* ClientMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ClientMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ctl_flag = 1;
  if (this->ctl_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ctl_flag(), target);
  }

  // .OtherClientMessage for_other = 2;
  if (has_for_other()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_for_other(), deterministic, target);
  }

  // .Map2DClientMessage for_map2d = 3;
  if (has_for_map2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_for_map2d(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ClientMessage)
  return target;
}

size_t ClientMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ClientMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 ctl_flag = 1;
  if (this->ctl_flag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ctl_flag());
  }

  switch (message_case()) {
    // .OtherClientMessage for_other = 2;
    case kForOther: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.for_other_);
      break;
    }
    // .Map2DClientMessage for_map2d = 3;
    case kForMap2D: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *message_.for_map2d_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ClientMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ClientMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ClientMessage)
    MergeFrom(*source);
  }
}

void ClientMessage::MergeFrom(const ClientMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ClientMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ctl_flag() != 0) {
    set_ctl_flag(from.ctl_flag());
  }
  switch (from.message_case()) {
    case kForOther: {
      mutable_for_other()->::OtherClientMessage::MergeFrom(from.for_other());
      break;
    }
    case kForMap2D: {
      mutable_for_map2d()->::Map2DClientMessage::MergeFrom(from.for_map2d());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void ClientMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage::CopyFrom(const ClientMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage::IsInitialized() const {
  return true;
}

void ClientMessage::Swap(ClientMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientMessage::InternalSwap(ClientMessage* other) {
  using std::swap;
  swap(ctl_flag_, other->ctl_flag_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ClientMessage::GetMetadata() const {
  protobuf_message_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_message_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OtherClientMessage* Arena::CreateMaybeMessage< ::OtherClientMessage >(Arena* arena) {
  return Arena::CreateInternal< ::OtherClientMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::OtherServerMessage* Arena::CreateMaybeMessage< ::OtherServerMessage >(Arena* arena) {
  return Arena::CreateInternal< ::OtherServerMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Map2DClientMessage* Arena::CreateMaybeMessage< ::Map2DClientMessage >(Arena* arena) {
  return Arena::CreateInternal< ::Map2DClientMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Map2DServerMessage* Arena::CreateMaybeMessage< ::Map2DServerMessage >(Arena* arena) {
  return Arena::CreateInternal< ::Map2DServerMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ServerMessage* Arena::CreateMaybeMessage< ::ServerMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ServerMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ClientMessage* Arena::CreateMaybeMessage< ::ClientMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ClientMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
