// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_INCLUDED_message_2eproto
#define PROTOBUF_INCLUDED_message_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_message_2eproto 

namespace protobuf_message_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_message_2eproto
class ClientMessage;
class ClientMessageDefaultTypeInternal;
extern ClientMessageDefaultTypeInternal _ClientMessage_default_instance_;
class Map2DClientMessage;
class Map2DClientMessageDefaultTypeInternal;
extern Map2DClientMessageDefaultTypeInternal _Map2DClientMessage_default_instance_;
class Map2DServerMessage;
class Map2DServerMessageDefaultTypeInternal;
extern Map2DServerMessageDefaultTypeInternal _Map2DServerMessage_default_instance_;
class OtherClientMessage;
class OtherClientMessageDefaultTypeInternal;
extern OtherClientMessageDefaultTypeInternal _OtherClientMessage_default_instance_;
class OtherServerMessage;
class OtherServerMessageDefaultTypeInternal;
extern OtherServerMessageDefaultTypeInternal _OtherServerMessage_default_instance_;
class ServerMessage;
class ServerMessageDefaultTypeInternal;
extern ServerMessageDefaultTypeInternal _ServerMessage_default_instance_;
namespace google {
namespace protobuf {
template<> ::ClientMessage* Arena::CreateMaybeMessage<::ClientMessage>(Arena*);
template<> ::Map2DClientMessage* Arena::CreateMaybeMessage<::Map2DClientMessage>(Arena*);
template<> ::Map2DServerMessage* Arena::CreateMaybeMessage<::Map2DServerMessage>(Arena*);
template<> ::OtherClientMessage* Arena::CreateMaybeMessage<::OtherClientMessage>(Arena*);
template<> ::OtherServerMessage* Arena::CreateMaybeMessage<::OtherServerMessage>(Arena*);
template<> ::ServerMessage* Arena::CreateMaybeMessage<::ServerMessage>(Arena*);
}  // namespace protobuf
}  // namespace google

enum Map2DClientMessage_ControlFlag {
  Map2DClientMessage_ControlFlag_UNKNOWN = 0,
  Map2DClientMessage_ControlFlag_UP = 1,
  Map2DClientMessage_ControlFlag_DOWN = 2,
  Map2DClientMessage_ControlFlag_LEFT = 3,
  Map2DClientMessage_ControlFlag_RIGHT = 4,
  Map2DClientMessage_ControlFlag_Map2DClientMessage_ControlFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Map2DClientMessage_ControlFlag_Map2DClientMessage_ControlFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Map2DClientMessage_ControlFlag_IsValid(int value);
const Map2DClientMessage_ControlFlag Map2DClientMessage_ControlFlag_ControlFlag_MIN = Map2DClientMessage_ControlFlag_UNKNOWN;
const Map2DClientMessage_ControlFlag Map2DClientMessage_ControlFlag_ControlFlag_MAX = Map2DClientMessage_ControlFlag_RIGHT;
const int Map2DClientMessage_ControlFlag_ControlFlag_ARRAYSIZE = Map2DClientMessage_ControlFlag_ControlFlag_MAX + 1;

const ::google::protobuf::EnumDescriptor* Map2DClientMessage_ControlFlag_descriptor();
inline const ::std::string& Map2DClientMessage_ControlFlag_Name(Map2DClientMessage_ControlFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    Map2DClientMessage_ControlFlag_descriptor(), value);
}
inline bool Map2DClientMessage_ControlFlag_Parse(
    const ::std::string& name, Map2DClientMessage_ControlFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Map2DClientMessage_ControlFlag>(
    Map2DClientMessage_ControlFlag_descriptor(), name, value);
}
// ===================================================================

class OtherClientMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OtherClientMessage) */ {
 public:
  OtherClientMessage();
  virtual ~OtherClientMessage();

  OtherClientMessage(const OtherClientMessage& from);

  inline OtherClientMessage& operator=(const OtherClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OtherClientMessage(OtherClientMessage&& from) noexcept
    : OtherClientMessage() {
    *this = ::std::move(from);
  }

  inline OtherClientMessage& operator=(OtherClientMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OtherClientMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OtherClientMessage* internal_default_instance() {
    return reinterpret_cast<const OtherClientMessage*>(
               &_OtherClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(OtherClientMessage* other);
  friend void swap(OtherClientMessage& a, OtherClientMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OtherClientMessage* New() const final {
    return CreateMaybeMessage<OtherClientMessage>(NULL);
  }

  OtherClientMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OtherClientMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OtherClientMessage& from);
  void MergeFrom(const OtherClientMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OtherClientMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:OtherClientMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OtherServerMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:OtherServerMessage) */ {
 public:
  OtherServerMessage();
  virtual ~OtherServerMessage();

  OtherServerMessage(const OtherServerMessage& from);

  inline OtherServerMessage& operator=(const OtherServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OtherServerMessage(OtherServerMessage&& from) noexcept
    : OtherServerMessage() {
    *this = ::std::move(from);
  }

  inline OtherServerMessage& operator=(OtherServerMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OtherServerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OtherServerMessage* internal_default_instance() {
    return reinterpret_cast<const OtherServerMessage*>(
               &_OtherServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(OtherServerMessage* other);
  friend void swap(OtherServerMessage& a, OtherServerMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OtherServerMessage* New() const final {
    return CreateMaybeMessage<OtherServerMessage>(NULL);
  }

  OtherServerMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OtherServerMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OtherServerMessage& from);
  void MergeFrom(const OtherServerMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OtherServerMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:OtherServerMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Map2DClientMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Map2DClientMessage) */ {
 public:
  Map2DClientMessage();
  virtual ~Map2DClientMessage();

  Map2DClientMessage(const Map2DClientMessage& from);

  inline Map2DClientMessage& operator=(const Map2DClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Map2DClientMessage(Map2DClientMessage&& from) noexcept
    : Map2DClientMessage() {
    *this = ::std::move(from);
  }

  inline Map2DClientMessage& operator=(Map2DClientMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Map2DClientMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map2DClientMessage* internal_default_instance() {
    return reinterpret_cast<const Map2DClientMessage*>(
               &_Map2DClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Map2DClientMessage* other);
  friend void swap(Map2DClientMessage& a, Map2DClientMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Map2DClientMessage* New() const final {
    return CreateMaybeMessage<Map2DClientMessage>(NULL);
  }

  Map2DClientMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Map2DClientMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Map2DClientMessage& from);
  void MergeFrom(const Map2DClientMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map2DClientMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Map2DClientMessage_ControlFlag ControlFlag;
  static const ControlFlag UNKNOWN =
    Map2DClientMessage_ControlFlag_UNKNOWN;
  static const ControlFlag UP =
    Map2DClientMessage_ControlFlag_UP;
  static const ControlFlag DOWN =
    Map2DClientMessage_ControlFlag_DOWN;
  static const ControlFlag LEFT =
    Map2DClientMessage_ControlFlag_LEFT;
  static const ControlFlag RIGHT =
    Map2DClientMessage_ControlFlag_RIGHT;
  static inline bool ControlFlag_IsValid(int value) {
    return Map2DClientMessage_ControlFlag_IsValid(value);
  }
  static const ControlFlag ControlFlag_MIN =
    Map2DClientMessage_ControlFlag_ControlFlag_MIN;
  static const ControlFlag ControlFlag_MAX =
    Map2DClientMessage_ControlFlag_ControlFlag_MAX;
  static const int ControlFlag_ARRAYSIZE =
    Map2DClientMessage_ControlFlag_ControlFlag_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ControlFlag_descriptor() {
    return Map2DClientMessage_ControlFlag_descriptor();
  }
  static inline const ::std::string& ControlFlag_Name(ControlFlag value) {
    return Map2DClientMessage_ControlFlag_Name(value);
  }
  static inline bool ControlFlag_Parse(const ::std::string& name,
      ControlFlag* value) {
    return Map2DClientMessage_ControlFlag_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Map2DClientMessage.ControlFlag ctl_flag = 1;
  void clear_ctl_flag();
  static const int kCtlFlagFieldNumber = 1;
  ::Map2DClientMessage_ControlFlag ctl_flag() const;
  void set_ctl_flag(::Map2DClientMessage_ControlFlag value);

  // @@protoc_insertion_point(class_scope:Map2DClientMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int ctl_flag_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Map2DServerMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Map2DServerMessage) */ {
 public:
  Map2DServerMessage();
  virtual ~Map2DServerMessage();

  Map2DServerMessage(const Map2DServerMessage& from);

  inline Map2DServerMessage& operator=(const Map2DServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Map2DServerMessage(Map2DServerMessage&& from) noexcept
    : Map2DServerMessage() {
    *this = ::std::move(from);
  }

  inline Map2DServerMessage& operator=(Map2DServerMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Map2DServerMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Map2DServerMessage* internal_default_instance() {
    return reinterpret_cast<const Map2DServerMessage*>(
               &_Map2DServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Map2DServerMessage* other);
  friend void swap(Map2DServerMessage& a, Map2DServerMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Map2DServerMessage* New() const final {
    return CreateMaybeMessage<Map2DServerMessage>(NULL);
  }

  Map2DServerMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Map2DServerMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Map2DServerMessage& from);
  void MergeFrom(const Map2DServerMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map2DServerMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes canvas = 3;
  void clear_canvas();
  static const int kCanvasFieldNumber = 3;
  const ::std::string& canvas() const;
  void set_canvas(const ::std::string& value);
  #if LANG_CXX11
  void set_canvas(::std::string&& value);
  #endif
  void set_canvas(const char* value);
  void set_canvas(const void* value, size_t size);
  ::std::string* mutable_canvas();
  ::std::string* release_canvas();
  void set_allocated_canvas(::std::string* canvas);

  // int32 posistion_x = 1;
  void clear_posistion_x();
  static const int kPosistionXFieldNumber = 1;
  ::google::protobuf::int32 posistion_x() const;
  void set_posistion_x(::google::protobuf::int32 value);

  // int32 posistion_y = 2;
  void clear_posistion_y();
  static const int kPosistionYFieldNumber = 2;
  ::google::protobuf::int32 posistion_y() const;
  void set_posistion_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Map2DServerMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr canvas_;
  ::google::protobuf::int32 posistion_x_;
  ::google::protobuf::int32 posistion_y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ServerMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerMessage) */ {
 public:
  ServerMessage();
  virtual ~ServerMessage();

  ServerMessage(const ServerMessage& from);

  inline ServerMessage& operator=(const ServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerMessage(ServerMessage&& from) noexcept
    : ServerMessage() {
    *this = ::std::move(from);
  }

  inline ServerMessage& operator=(ServerMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerMessage& default_instance();

  enum MessageCase {
    kForOther = 3,
    kForMap2D = 4,
    MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerMessage* internal_default_instance() {
    return reinterpret_cast<const ServerMessage*>(
               &_ServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ServerMessage* other);
  friend void swap(ServerMessage& a, ServerMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerMessage* New() const final {
    return CreateMaybeMessage<ServerMessage>(NULL);
  }

  ServerMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerMessage& from);
  void MergeFrom(const ServerMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string error_msg = 2;
  void clear_error_msg();
  static const int kErrorMsgFieldNumber = 2;
  const ::std::string& error_msg() const;
  void set_error_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_error_msg(::std::string&& value);
  #endif
  void set_error_msg(const char* value);
  void set_error_msg(const char* value, size_t size);
  ::std::string* mutable_error_msg();
  ::std::string* release_error_msg();
  void set_allocated_error_msg(::std::string* error_msg);

  // int32 error_code = 1;
  void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  ::google::protobuf::int32 error_code() const;
  void set_error_code(::google::protobuf::int32 value);

  // .OtherServerMessage for_other = 3;
  bool has_for_other() const;
  void clear_for_other();
  static const int kForOtherFieldNumber = 3;
  private:
  const ::OtherServerMessage& _internal_for_other() const;
  public:
  const ::OtherServerMessage& for_other() const;
  ::OtherServerMessage* release_for_other();
  ::OtherServerMessage* mutable_for_other();
  void set_allocated_for_other(::OtherServerMessage* for_other);

  // .Map2DServerMessage for_map2d = 4;
  bool has_for_map2d() const;
  void clear_for_map2d();
  static const int kForMap2DFieldNumber = 4;
  private:
  const ::Map2DServerMessage& _internal_for_map2d() const;
  public:
  const ::Map2DServerMessage& for_map2d() const;
  ::Map2DServerMessage* release_for_map2d();
  ::Map2DServerMessage* mutable_for_map2d();
  void set_allocated_for_map2d(::Map2DServerMessage* for_map2d);

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:ServerMessage)
 private:
  void set_has_for_other();
  void set_has_for_map2d();

  inline bool has_message() const;
  inline void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr error_msg_;
  ::google::protobuf::int32 error_code_;
  union MessageUnion {
    MessageUnion() {}
    ::OtherServerMessage* for_other_;
    ::Map2DServerMessage* for_map2d_;
  } message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_message_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClientMessage) */ {
 public:
  ClientMessage();
  virtual ~ClientMessage();

  ClientMessage(const ClientMessage& from);

  inline ClientMessage& operator=(const ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientMessage(ClientMessage&& from) noexcept
    : ClientMessage() {
    *this = ::std::move(from);
  }

  inline ClientMessage& operator=(ClientMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientMessage& default_instance();

  enum MessageCase {
    kForOther = 2,
    kForMap2D = 3,
    MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientMessage* internal_default_instance() {
    return reinterpret_cast<const ClientMessage*>(
               &_ClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ClientMessage* other);
  friend void swap(ClientMessage& a, ClientMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage* New() const final {
    return CreateMaybeMessage<ClientMessage>(NULL);
  }

  ClientMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientMessage& from);
  void MergeFrom(const ClientMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 ctl_flag = 1;
  void clear_ctl_flag();
  static const int kCtlFlagFieldNumber = 1;
  ::google::protobuf::int32 ctl_flag() const;
  void set_ctl_flag(::google::protobuf::int32 value);

  // .OtherClientMessage for_other = 2;
  bool has_for_other() const;
  void clear_for_other();
  static const int kForOtherFieldNumber = 2;
  private:
  const ::OtherClientMessage& _internal_for_other() const;
  public:
  const ::OtherClientMessage& for_other() const;
  ::OtherClientMessage* release_for_other();
  ::OtherClientMessage* mutable_for_other();
  void set_allocated_for_other(::OtherClientMessage* for_other);

  // .Map2DClientMessage for_map2d = 3;
  bool has_for_map2d() const;
  void clear_for_map2d();
  static const int kForMap2DFieldNumber = 3;
  private:
  const ::Map2DClientMessage& _internal_for_map2d() const;
  public:
  const ::Map2DClientMessage& for_map2d() const;
  ::Map2DClientMessage* release_for_map2d();
  ::Map2DClientMessage* mutable_for_map2d();
  void set_allocated_for_map2d(::Map2DClientMessage* for_map2d);

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:ClientMessage)
 private:
  void set_has_for_other();
  void set_has_for_map2d();

  inline bool has_message() const;
  inline void clear_has_message();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 ctl_flag_;
  union MessageUnion {
    MessageUnion() {}
    ::OtherClientMessage* for_other_;
    ::Map2DClientMessage* for_map2d_;
  } message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_message_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OtherClientMessage

// -------------------------------------------------------------------

// OtherServerMessage

// -------------------------------------------------------------------

// Map2DClientMessage

// .Map2DClientMessage.ControlFlag ctl_flag = 1;
inline void Map2DClientMessage::clear_ctl_flag() {
  ctl_flag_ = 0;
}
inline ::Map2DClientMessage_ControlFlag Map2DClientMessage::ctl_flag() const {
  // @@protoc_insertion_point(field_get:Map2DClientMessage.ctl_flag)
  return static_cast< ::Map2DClientMessage_ControlFlag >(ctl_flag_);
}
inline void Map2DClientMessage::set_ctl_flag(::Map2DClientMessage_ControlFlag value) {
  
  ctl_flag_ = value;
  // @@protoc_insertion_point(field_set:Map2DClientMessage.ctl_flag)
}

// -------------------------------------------------------------------

// Map2DServerMessage

// int32 posistion_x = 1;
inline void Map2DServerMessage::clear_posistion_x() {
  posistion_x_ = 0;
}
inline ::google::protobuf::int32 Map2DServerMessage::posistion_x() const {
  // @@protoc_insertion_point(field_get:Map2DServerMessage.posistion_x)
  return posistion_x_;
}
inline void Map2DServerMessage::set_posistion_x(::google::protobuf::int32 value) {
  
  posistion_x_ = value;
  // @@protoc_insertion_point(field_set:Map2DServerMessage.posistion_x)
}

// int32 posistion_y = 2;
inline void Map2DServerMessage::clear_posistion_y() {
  posistion_y_ = 0;
}
inline ::google::protobuf::int32 Map2DServerMessage::posistion_y() const {
  // @@protoc_insertion_point(field_get:Map2DServerMessage.posistion_y)
  return posistion_y_;
}
inline void Map2DServerMessage::set_posistion_y(::google::protobuf::int32 value) {
  
  posistion_y_ = value;
  // @@protoc_insertion_point(field_set:Map2DServerMessage.posistion_y)
}

// bytes canvas = 3;
inline void Map2DServerMessage::clear_canvas() {
  canvas_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Map2DServerMessage::canvas() const {
  // @@protoc_insertion_point(field_get:Map2DServerMessage.canvas)
  return canvas_.GetNoArena();
}
inline void Map2DServerMessage::set_canvas(const ::std::string& value) {
  
  canvas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Map2DServerMessage.canvas)
}
#if LANG_CXX11
inline void Map2DServerMessage::set_canvas(::std::string&& value) {
  
  canvas_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Map2DServerMessage.canvas)
}
#endif
inline void Map2DServerMessage::set_canvas(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  canvas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Map2DServerMessage.canvas)
}
inline void Map2DServerMessage::set_canvas(const void* value, size_t size) {
  
  canvas_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Map2DServerMessage.canvas)
}
inline ::std::string* Map2DServerMessage::mutable_canvas() {
  
  // @@protoc_insertion_point(field_mutable:Map2DServerMessage.canvas)
  return canvas_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Map2DServerMessage::release_canvas() {
  // @@protoc_insertion_point(field_release:Map2DServerMessage.canvas)
  
  return canvas_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Map2DServerMessage::set_allocated_canvas(::std::string* canvas) {
  if (canvas != NULL) {
    
  } else {
    
  }
  canvas_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), canvas);
  // @@protoc_insertion_point(field_set_allocated:Map2DServerMessage.canvas)
}

// -------------------------------------------------------------------

// ServerMessage

// int32 error_code = 1;
inline void ServerMessage::clear_error_code() {
  error_code_ = 0;
}
inline ::google::protobuf::int32 ServerMessage::error_code() const {
  // @@protoc_insertion_point(field_get:ServerMessage.error_code)
  return error_code_;
}
inline void ServerMessage::set_error_code(::google::protobuf::int32 value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:ServerMessage.error_code)
}

// string error_msg = 2;
inline void ServerMessage::clear_error_msg() {
  error_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerMessage::error_msg() const {
  // @@protoc_insertion_point(field_get:ServerMessage.error_msg)
  return error_msg_.GetNoArena();
}
inline void ServerMessage::set_error_msg(const ::std::string& value) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ServerMessage.error_msg)
}
#if LANG_CXX11
inline void ServerMessage::set_error_msg(::std::string&& value) {
  
  error_msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ServerMessage.error_msg)
}
#endif
inline void ServerMessage::set_error_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ServerMessage.error_msg)
}
inline void ServerMessage::set_error_msg(const char* value, size_t size) {
  
  error_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ServerMessage.error_msg)
}
inline ::std::string* ServerMessage::mutable_error_msg() {
  
  // @@protoc_insertion_point(field_mutable:ServerMessage.error_msg)
  return error_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerMessage::release_error_msg() {
  // @@protoc_insertion_point(field_release:ServerMessage.error_msg)
  
  return error_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerMessage::set_allocated_error_msg(::std::string* error_msg) {
  if (error_msg != NULL) {
    
  } else {
    
  }
  error_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_msg);
  // @@protoc_insertion_point(field_set_allocated:ServerMessage.error_msg)
}

// .OtherServerMessage for_other = 3;
inline bool ServerMessage::has_for_other() const {
  return message_case() == kForOther;
}
inline void ServerMessage::set_has_for_other() {
  _oneof_case_[0] = kForOther;
}
inline void ServerMessage::clear_for_other() {
  if (has_for_other()) {
    delete message_.for_other_;
    clear_has_message();
  }
}
inline const ::OtherServerMessage& ServerMessage::_internal_for_other() const {
  return *message_.for_other_;
}
inline ::OtherServerMessage* ServerMessage::release_for_other() {
  // @@protoc_insertion_point(field_release:ServerMessage.for_other)
  if (has_for_other()) {
    clear_has_message();
      ::OtherServerMessage* temp = message_.for_other_;
    message_.for_other_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::OtherServerMessage& ServerMessage::for_other() const {
  // @@protoc_insertion_point(field_get:ServerMessage.for_other)
  return has_for_other()
      ? *message_.for_other_
      : *reinterpret_cast< ::OtherServerMessage*>(&::_OtherServerMessage_default_instance_);
}
inline ::OtherServerMessage* ServerMessage::mutable_for_other() {
  if (!has_for_other()) {
    clear_message();
    set_has_for_other();
    message_.for_other_ = CreateMaybeMessage< ::OtherServerMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ServerMessage.for_other)
  return message_.for_other_;
}

// .Map2DServerMessage for_map2d = 4;
inline bool ServerMessage::has_for_map2d() const {
  return message_case() == kForMap2D;
}
inline void ServerMessage::set_has_for_map2d() {
  _oneof_case_[0] = kForMap2D;
}
inline void ServerMessage::clear_for_map2d() {
  if (has_for_map2d()) {
    delete message_.for_map2d_;
    clear_has_message();
  }
}
inline const ::Map2DServerMessage& ServerMessage::_internal_for_map2d() const {
  return *message_.for_map2d_;
}
inline ::Map2DServerMessage* ServerMessage::release_for_map2d() {
  // @@protoc_insertion_point(field_release:ServerMessage.for_map2d)
  if (has_for_map2d()) {
    clear_has_message();
      ::Map2DServerMessage* temp = message_.for_map2d_;
    message_.for_map2d_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::Map2DServerMessage& ServerMessage::for_map2d() const {
  // @@protoc_insertion_point(field_get:ServerMessage.for_map2d)
  return has_for_map2d()
      ? *message_.for_map2d_
      : *reinterpret_cast< ::Map2DServerMessage*>(&::_Map2DServerMessage_default_instance_);
}
inline ::Map2DServerMessage* ServerMessage::mutable_for_map2d() {
  if (!has_for_map2d()) {
    clear_message();
    set_has_for_map2d();
    message_.for_map2d_ = CreateMaybeMessage< ::Map2DServerMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ServerMessage.for_map2d)
  return message_.for_map2d_;
}

inline bool ServerMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void ServerMessage::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline ServerMessage::MessageCase ServerMessage::message_case() const {
  return ServerMessage::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ClientMessage

// int32 ctl_flag = 1;
inline void ClientMessage::clear_ctl_flag() {
  ctl_flag_ = 0;
}
inline ::google::protobuf::int32 ClientMessage::ctl_flag() const {
  // @@protoc_insertion_point(field_get:ClientMessage.ctl_flag)
  return ctl_flag_;
}
inline void ClientMessage::set_ctl_flag(::google::protobuf::int32 value) {
  
  ctl_flag_ = value;
  // @@protoc_insertion_point(field_set:ClientMessage.ctl_flag)
}

// .OtherClientMessage for_other = 2;
inline bool ClientMessage::has_for_other() const {
  return message_case() == kForOther;
}
inline void ClientMessage::set_has_for_other() {
  _oneof_case_[0] = kForOther;
}
inline void ClientMessage::clear_for_other() {
  if (has_for_other()) {
    delete message_.for_other_;
    clear_has_message();
  }
}
inline const ::OtherClientMessage& ClientMessage::_internal_for_other() const {
  return *message_.for_other_;
}
inline ::OtherClientMessage* ClientMessage::release_for_other() {
  // @@protoc_insertion_point(field_release:ClientMessage.for_other)
  if (has_for_other()) {
    clear_has_message();
      ::OtherClientMessage* temp = message_.for_other_;
    message_.for_other_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::OtherClientMessage& ClientMessage::for_other() const {
  // @@protoc_insertion_point(field_get:ClientMessage.for_other)
  return has_for_other()
      ? *message_.for_other_
      : *reinterpret_cast< ::OtherClientMessage*>(&::_OtherClientMessage_default_instance_);
}
inline ::OtherClientMessage* ClientMessage::mutable_for_other() {
  if (!has_for_other()) {
    clear_message();
    set_has_for_other();
    message_.for_other_ = CreateMaybeMessage< ::OtherClientMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ClientMessage.for_other)
  return message_.for_other_;
}

// .Map2DClientMessage for_map2d = 3;
inline bool ClientMessage::has_for_map2d() const {
  return message_case() == kForMap2D;
}
inline void ClientMessage::set_has_for_map2d() {
  _oneof_case_[0] = kForMap2D;
}
inline void ClientMessage::clear_for_map2d() {
  if (has_for_map2d()) {
    delete message_.for_map2d_;
    clear_has_message();
  }
}
inline const ::Map2DClientMessage& ClientMessage::_internal_for_map2d() const {
  return *message_.for_map2d_;
}
inline ::Map2DClientMessage* ClientMessage::release_for_map2d() {
  // @@protoc_insertion_point(field_release:ClientMessage.for_map2d)
  if (has_for_map2d()) {
    clear_has_message();
      ::Map2DClientMessage* temp = message_.for_map2d_;
    message_.for_map2d_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::Map2DClientMessage& ClientMessage::for_map2d() const {
  // @@protoc_insertion_point(field_get:ClientMessage.for_map2d)
  return has_for_map2d()
      ? *message_.for_map2d_
      : *reinterpret_cast< ::Map2DClientMessage*>(&::_Map2DClientMessage_default_instance_);
}
inline ::Map2DClientMessage* ClientMessage::mutable_for_map2d() {
  if (!has_for_map2d()) {
    clear_message();
    set_has_for_map2d();
    message_.for_map2d_ = CreateMaybeMessage< ::Map2DClientMessage >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ClientMessage.for_map2d)
  return message_.for_map2d_;
}

inline bool ClientMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void ClientMessage::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline ClientMessage::MessageCase ClientMessage::message_case() const {
  return ClientMessage::MessageCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Map2DClientMessage_ControlFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map2DClientMessage_ControlFlag>() {
  return ::Map2DClientMessage_ControlFlag_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_message_2eproto
